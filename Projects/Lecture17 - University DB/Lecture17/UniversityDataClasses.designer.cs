#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lecture17
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="University")]
	public partial class UniversityDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCourseOffering(CourseOffering instance);
    partial void UpdateCourseOffering(CourseOffering instance);
    partial void DeleteCourseOffering(CourseOffering instance);
    partial void InsertGradeReport(GradeReport instance);
    partial void UpdateGradeReport(GradeReport instance);
    partial void DeleteGradeReport(GradeReport instance);
    partial void InsertPreReq(PreReq instance);
    partial void UpdatePreReq(PreReq instance);
    partial void DeletePreReq(PreReq instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public UniversityDataClassesDataContext() : 
				base(global::Lecture17.Properties.Settings.Default.UniversityConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UniversityDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniversityDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniversityDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniversityDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CourseOffering> CourseOfferings
		{
			get
			{
				return this.GetTable<CourseOffering>();
			}
		}
		
		public System.Data.Linq.Table<GradeReport> GradeReports
		{
			get
			{
				return this.GetTable<GradeReport>();
			}
		}
		
		public System.Data.Linq.Table<PreReq> PreReqs
		{
			get
			{
				return this.GetTable<PreReq>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseNumber;
		
		private string _CourseName;
		
		private System.Nullable<int> _CreditHours;
		
		private string _Department;
		
		private EntitySet<CourseOffering> _CourseOfferings;
		
		private EntitySet<PreReq> _PreReqs;
		
		private EntitySet<PreReq> _PreReqs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseNumberChanging(int value);
    partial void OnCourseNumberChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnCreditHoursChanging(System.Nullable<int> value);
    partial void OnCreditHoursChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    #endregion
		
		public Course()
		{
			this._CourseOfferings = new EntitySet<CourseOffering>(new Action<CourseOffering>(this.attach_CourseOfferings), new Action<CourseOffering>(this.detach_CourseOfferings));
			this._PreReqs = new EntitySet<PreReq>(new Action<PreReq>(this.attach_PreReqs), new Action<PreReq>(this.detach_PreReqs));
			this._PreReqs1 = new EntitySet<PreReq>(new Action<PreReq>(this.attach_PreReqs1), new Action<PreReq>(this.detach_PreReqs1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseNumber
		{
			get
			{
				return this._CourseNumber;
			}
			set
			{
				if ((this._CourseNumber != value))
				{
					this.OnCourseNumberChanging(value);
					this.SendPropertyChanging();
					this._CourseNumber = value;
					this.SendPropertyChanged("CourseNumber");
					this.OnCourseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="NVarChar(MAX)")]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditHours", DbType="Int")]
		public System.Nullable<int> CreditHours
		{
			get
			{
				return this._CreditHours;
			}
			set
			{
				if ((this._CreditHours != value))
				{
					this.OnCreditHoursChanging(value);
					this.SendPropertyChanging();
					this._CreditHours = value;
					this.SendPropertyChanged("CreditHours");
					this.OnCreditHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(MAX)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseOffering", Storage="_CourseOfferings", ThisKey="CourseNumber", OtherKey="CourseNumber")]
		public EntitySet<CourseOffering> CourseOfferings
		{
			get
			{
				return this._CourseOfferings;
			}
			set
			{
				this._CourseOfferings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_PreReq", Storage="_PreReqs", ThisKey="CourseNumber", OtherKey="CourseNumber")]
		public EntitySet<PreReq> PreReqs
		{
			get
			{
				return this._PreReqs;
			}
			set
			{
				this._PreReqs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_PreReq1", Storage="_PreReqs1", ThisKey="CourseNumber", OtherKey="PreReqNumber")]
		public EntitySet<PreReq> PreReqs1
		{
			get
			{
				return this._PreReqs1;
			}
			set
			{
				this._PreReqs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseOfferings(CourseOffering entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseOfferings(CourseOffering entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_PreReqs(PreReq entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_PreReqs(PreReq entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_PreReqs1(PreReq entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_PreReqs1(PreReq entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseOffering")]
	public partial class CourseOffering : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OfferingId;
		
		private System.Nullable<int> _CourseNumber;
		
		private System.Nullable<int> _Semester;
		
		private string _Year;
		
		private string _Instructor;
		
		private EntitySet<GradeReport> _GradeReports;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfferingIdChanging(int value);
    partial void OnOfferingIdChanged();
    partial void OnCourseNumberChanging(System.Nullable<int> value);
    partial void OnCourseNumberChanged();
    partial void OnSemesterChanging(System.Nullable<int> value);
    partial void OnSemesterChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnInstructorChanging(string value);
    partial void OnInstructorChanged();
    #endregion
		
		public CourseOffering()
		{
			this._GradeReports = new EntitySet<GradeReport>(new Action<GradeReport>(this.attach_GradeReports), new Action<GradeReport>(this.detach_GradeReports));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OfferingId
		{
			get
			{
				return this._OfferingId;
			}
			set
			{
				if ((this._OfferingId != value))
				{
					this.OnOfferingIdChanging(value);
					this.SendPropertyChanging();
					this._OfferingId = value;
					this.SendPropertyChanged("OfferingId");
					this.OnOfferingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseNumber", DbType="Int")]
		public System.Nullable<int> CourseNumber
		{
			get
			{
				return this._CourseNumber;
			}
			set
			{
				if ((this._CourseNumber != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseNumberChanging(value);
					this.SendPropertyChanging();
					this._CourseNumber = value;
					this.SendPropertyChanged("CourseNumber");
					this.OnCourseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester", DbType="Int")]
		public System.Nullable<int> Semester
		{
			get
			{
				return this._Semester;
			}
			set
			{
				if ((this._Semester != value))
				{
					this.OnSemesterChanging(value);
					this.SendPropertyChanging();
					this._Semester = value;
					this.SendPropertyChanged("Semester");
					this.OnSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(MAX)")]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instructor", DbType="NVarChar(MAX)")]
		public string Instructor
		{
			get
			{
				return this._Instructor;
			}
			set
			{
				if ((this._Instructor != value))
				{
					this.OnInstructorChanging(value);
					this.SendPropertyChanging();
					this._Instructor = value;
					this.SendPropertyChanged("Instructor");
					this.OnInstructorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseOffering_GradeReport", Storage="_GradeReports", ThisKey="OfferingId", OtherKey="OfferingId")]
		public EntitySet<GradeReport> GradeReports
		{
			get
			{
				return this._GradeReports;
			}
			set
			{
				this._GradeReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseOffering", Storage="_Course", ThisKey="CourseNumber", OtherKey="CourseNumber", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseOfferings.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseOfferings.Add(this);
						this._CourseNumber = value.CourseNumber;
					}
					else
					{
						this._CourseNumber = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GradeReports(GradeReport entity)
		{
			this.SendPropertyChanging();
			entity.CourseOffering = this;
		}
		
		private void detach_GradeReports(GradeReport entity)
		{
			this.SendPropertyChanging();
			entity.CourseOffering = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GradeReport")]
	public partial class GradeReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentNumber;
		
		private System.Nullable<int> _OfferingId;
		
		private string _Grade;
		
		private int _Id;
		
		private EntityRef<CourseOffering> _CourseOffering;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentNumberChanging(int value);
    partial void OnStudentNumberChanged();
    partial void OnOfferingIdChanging(System.Nullable<int> value);
    partial void OnOfferingIdChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public GradeReport()
		{
			this._CourseOffering = default(EntityRef<CourseOffering>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentNumber", DbType="Int NOT NULL")]
		public int StudentNumber
		{
			get
			{
				return this._StudentNumber;
			}
			set
			{
				if ((this._StudentNumber != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentNumberChanging(value);
					this.SendPropertyChanging();
					this._StudentNumber = value;
					this.SendPropertyChanged("StudentNumber");
					this.OnStudentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferingId", DbType="Int")]
		public System.Nullable<int> OfferingId
		{
			get
			{
				return this._OfferingId;
			}
			set
			{
				if ((this._OfferingId != value))
				{
					if (this._CourseOffering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfferingIdChanging(value);
					this.SendPropertyChanging();
					this._OfferingId = value;
					this.SendPropertyChanged("OfferingId");
					this.OnOfferingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="NVarChar(MAX)")]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseOffering_GradeReport", Storage="_CourseOffering", ThisKey="OfferingId", OtherKey="OfferingId", IsForeignKey=true)]
		public CourseOffering CourseOffering
		{
			get
			{
				return this._CourseOffering.Entity;
			}
			set
			{
				CourseOffering previousValue = this._CourseOffering.Entity;
				if (((previousValue != value) 
							|| (this._CourseOffering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseOffering.Entity = null;
						previousValue.GradeReports.Remove(this);
					}
					this._CourseOffering.Entity = value;
					if ((value != null))
					{
						value.GradeReports.Add(this);
						this._OfferingId = value.OfferingId;
					}
					else
					{
						this._OfferingId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseOffering");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_GradeReport", Storage="_Student", ThisKey="StudentNumber", OtherKey="StudentNumber", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.GradeReports.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.GradeReports.Add(this);
						this._StudentNumber = value.StudentNumber;
					}
					else
					{
						this._StudentNumber = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PreReq")]
	public partial class PreReq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseNumber;
		
		private System.Nullable<int> _PreReqNumber;
		
		private int _Id;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Course> _Course1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseNumberChanging(int value);
    partial void OnCourseNumberChanged();
    partial void OnPreReqNumberChanging(System.Nullable<int> value);
    partial void OnPreReqNumberChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public PreReq()
		{
			this._Course = default(EntityRef<Course>);
			this._Course1 = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseNumber", DbType="Int NOT NULL")]
		public int CourseNumber
		{
			get
			{
				return this._CourseNumber;
			}
			set
			{
				if ((this._CourseNumber != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseNumberChanging(value);
					this.SendPropertyChanging();
					this._CourseNumber = value;
					this.SendPropertyChanged("CourseNumber");
					this.OnCourseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreReqNumber", DbType="Int")]
		public System.Nullable<int> PreReqNumber
		{
			get
			{
				return this._PreReqNumber;
			}
			set
			{
				if ((this._PreReqNumber != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreReqNumberChanging(value);
					this.SendPropertyChanging();
					this._PreReqNumber = value;
					this.SendPropertyChanged("PreReqNumber");
					this.OnPreReqNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_PreReq", Storage="_Course", ThisKey="CourseNumber", OtherKey="CourseNumber", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.PreReqs.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.PreReqs.Add(this);
						this._CourseNumber = value.CourseNumber;
					}
					else
					{
						this._CourseNumber = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_PreReq1", Storage="_Course1", ThisKey="PreReqNumber", OtherKey="CourseNumber", IsForeignKey=true)]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.PreReqs1.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.PreReqs1.Add(this);
						this._PreReqNumber = value.CourseNumber;
					}
					else
					{
						this._PreReqNumber = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentNumber;
		
		private string _Name;
		
		private string _Class;
		
		private string _Major;
		
		private EntitySet<GradeReport> _GradeReports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentNumberChanging(int value);
    partial void OnStudentNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnMajorChanging(string value);
    partial void OnMajorChanged();
    #endregion
		
		public Student()
		{
			this._GradeReports = new EntitySet<GradeReport>(new Action<GradeReport>(this.attach_GradeReports), new Action<GradeReport>(this.detach_GradeReports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentNumber
		{
			get
			{
				return this._StudentNumber;
			}
			set
			{
				if ((this._StudentNumber != value))
				{
					this.OnStudentNumberChanging(value);
					this.SendPropertyChanging();
					this._StudentNumber = value;
					this.SendPropertyChanged("StudentNumber");
					this.OnStudentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="NVarChar(MAX)")]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Major", DbType="NVarChar(MAX)")]
		public string Major
		{
			get
			{
				return this._Major;
			}
			set
			{
				if ((this._Major != value))
				{
					this.OnMajorChanging(value);
					this.SendPropertyChanging();
					this._Major = value;
					this.SendPropertyChanged("Major");
					this.OnMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_GradeReport", Storage="_GradeReports", ThisKey="StudentNumber", OtherKey="StudentNumber")]
		public EntitySet<GradeReport> GradeReports
		{
			get
			{
				return this._GradeReports;
			}
			set
			{
				this._GradeReports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GradeReports(GradeReport entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_GradeReports(GradeReport entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
}
#pragma warning restore 1591
